/**
 * Search results responding for searching events within the LiveNationAPI.
 * @seeUS135
 *
 *
 * Generated by JSON2Apex http://json2apex.herokuapp.com/
 *
 * The supplied json has fields with names that are reserved words in apex
 * and so can only be parsed with explicitly generated code, this option
 * was auto selected for you.
 **/
public class LNE_API_EventSearchResp {
	public static void consumeObject(JSONParser parser) {
		Integer depth = 0;
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	public class Meta {
		public Integer status {get;set;} 
		public String message {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'status') {
							status = parser.getIntegerValue();
						} else if (text == 'message') {
							message = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Pagination {
		public Integer total {get;set;} 
		public Integer offset {get;set;} 
		public Integer count {get;set;} 

		public Pagination(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'offset') {
							offset = parser.getIntegerValue();
						} else if (text == 'count') {
							count = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Pagination consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address {
		public String street {get;set;} 
		public String street2 {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String postal_code {get;set;} 
		public String country {get;set;} 

		public Address(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'street') {
							street = parser.getText();
						} else if (text == 'street2') {
							street2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'postal_code') {
							postal_code = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Venue {
		public String id {get;set;} 
		public String name {get;set;} 
		public String lat {get;set;} 
		public String lng {get;set;} 
		public String homepage {get;set;} 
		public Address address {get;set;} 
		public String phone {get;set;} 
		public List<String> ticketmaster_ids {get;set;} 
		public String time_zone {get;set;} 
		public String time_zone_abbr {get;set;} 
		public String url_slug {get;set;} 
		public String vdp_img_url {get;set;} 
		public Boolean owned_by_ln {get;set;} 
		public Boolean terrapass {get;set;} 

		public Venue(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'lat') {
							lat = parser.getText();
						} else if (text == 'lng') {
							lng = parser.getText();
						} else if (text == 'homepage') {
							homepage = parser.getText();
						} else if (text == 'address') {
							address = new Address(parser);
						} else if (text == 'phone') {
							phone = parser.getText();
						} else if (text == 'ticketmaster_ids') {
							ticketmaster_ids = new List<String>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								ticketmaster_ids.add(parser.getText());
							}
						} else if (text == 'time_zone') {
							time_zone = parser.getText();
						} else if (text == 'time_zone_abbr') {
							time_zone_abbr = parser.getText();
						} else if (text == 'url_slug') {
							url_slug = parser.getText();
						} else if (text == 'vdp_img_url') {
							vdp_img_url = parser.getText();
						} else if (text == 'owned_by_ln') {
							owned_by_ln = parser.getBooleanValue();
						} else if (text == 'terrapass') {
							terrapass = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Venue consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ticket_promoter {
		public String created_at {get;set;} 
		public Integer id {get;set;} 
		public Integer promoter_bc_id {get;set;} 
		public String promoter_name {get;set;} 
		public Integer ticket_offering_bc_id {get;set;} 
		public String updated_at {get;set;} 

		public Ticket_promoter(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'created_at') {
							created_at = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'promoter_bc_id') {
							promoter_bc_id = parser.getIntegerValue();
						} else if (text == 'promoter_name') {
							promoter_name = parser.getText();
						} else if (text == 'ticket_offering_bc_id') {
							ticket_offering_bc_id = parser.getIntegerValue();
						} else if (text == 'updated_at') {
							updated_at = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Ticket_promoter consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Meta meta {get;set;} 
	public Pagination pagination {get;set;} 
	public List<Data> data {get;set;} 

	public LNE_API_EventSearchResp(JSONParser parser) {
		while (parser.nextToken() != JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != JSONToken.VALUE_NULL) {
					if (text == 'meta') {
						meta = new Meta(parser);
					} else if (text == 'pagination') {
						pagination = new Pagination(parser);
					} else if (text == 'data') {
						data = new List<Data>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							data.add(new Data(parser));
						}
					} else {
						System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Images {

		public Images(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Images consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ticket_offerings {
		public Integer bc_id {get;set;} 
		public Boolean show_on_web {get;set;} 
		public String on_sale_at {get;set;} 
		public Object removed_on {get;set;} 
		public String name {get;set;} 
		public String purchase_url {get;set;} 
		public String source {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String type_description {get;set;} 
		public String availability {get;set;} 
		public Object availability_description {get;set;} 
		public Integer bc_event_id {get;set;} 
		public Ticket_promoter ticket_promoter {get;set;} 

		public Ticket_offerings(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'bc_id') {
							bc_id = parser.getIntegerValue();
						} else if (text == 'show_on_web') {
							show_on_web = parser.getBooleanValue();
						} else if (text == 'on_sale_at') {
							on_sale_at = parser.getText();
						} else if (text == 'removed_on') {
							removed_on = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'purchase_url') {
							purchase_url = parser.getText();
						} else if (text == 'source') {
							source = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'type_description') {
							type_description = parser.getText();
						} else if (text == 'availability') {
							availability = parser.getText();
						} else if (text == 'availability_description') {
							availability_description = parser.getText();
						} else if (text == 'bc_event_id') {
							bc_event_id = parser.getIntegerValue();
						} else if (text == 'ticket_promoter') {
							ticket_promoter = new Ticket_promoter(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Ticket_offerings consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String id {get;set;} 
		public String name {get;set;} 
		public String lat {get;set;} 
		public String lng {get;set;} 
		public String start_time {get;set;} 
		public String end_time {get;set;} 
		public Boolean canceled {get;set;} 
		public List<String> ticketmaster_ids {get;set;} 
		public String buy_link {get;set;} 
		public String on_sale_at {get;set;} 
		public String on_sale_date {get;set;} 
		public String local_start_time {get;set;} 
		public String on_sale_at_local {get;set;} 
		public String local_on_sale_date {get;set;} 
		public String created_at {get;set;} 
		public String updated_at {get;set;} 
		public String url_slug {get;set;} 
		public List<Images> images {get;set;} 
		public Boolean ln_promoted {get;set;} 
		public Boolean megaticket {get;set;} 
		public String event_type {get;set;} 
		public Boolean is_external_buy_link {get;set;} 
		public Boolean tips {get;set;} 
		public Venue venue {get;set;} 
		public List<Ticket_offerings> ticket_offerings {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'lat') {
							lat = parser.getText();
						} else if (text == 'lng') {
							lng = parser.getText();
						} else if (text == 'start_time') {
							start_time = parser.getText();
						} else if (text == 'end_time') {
							end_time = parser.getText();
						} else if (text == 'canceled') {
							canceled = parser.getBooleanValue();
						} else if (text == 'ticketmaster_ids') {
							ticketmaster_ids = new List<String>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								ticketmaster_ids.add(parser.getText());
							}
						} else if (text == 'buy_link') {
							buy_link = parser.getText();
						} else if (text == 'on_sale_at') {
							on_sale_at = parser.getText();
						} else if (text == 'on_sale_date') {
							on_sale_date = parser.getText();
						} else if (text == 'local_start_time') {
							local_start_time = parser.getText();
						} else if (text == 'on_sale_at_local') {
							on_sale_at_local = parser.getText();
						} else if (text == 'local_on_sale_date') {
							local_on_sale_date = parser.getText();
						} else if (text == 'created_at') {
							created_at = parser.getText();
						} else if (text == 'updated_at') {
							updated_at = parser.getText();
						} else if (text == 'url_slug') {
							url_slug = parser.getText();
						} else if (text == 'images') {
							images = new List<Images>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								images.add(new Images(parser));
							}
						} else if (text == 'ln_promoted') {
							ln_promoted = parser.getBooleanValue();
						} else if (text == 'megaticket') {
							megaticket = parser.getBooleanValue();
						} else if (text == 'event_type') {
							event_type = parser.getText();
						} else if (text == 'is_external_buy_link') {
							is_external_buy_link = parser.getBooleanValue();
						} else if (text == 'tips') {
							tips = parser.getBooleanValue();
						} else if (text == 'venue') {
							venue = new Venue(parser);
						} else if (text == 'ticket_offerings') {
							ticket_offerings = new List<Ticket_offerings>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								ticket_offerings.add(new Ticket_offerings(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static LNE_API_EventSearchResp parse(String json) {
		return new LNE_API_EventSearchResp(System.JSON.createParser(json));
	}
}