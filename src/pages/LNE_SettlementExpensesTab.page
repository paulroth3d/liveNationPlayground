<apex:page standardController="Event__c" extensions="LNE_SettlementExpensesTab_CX,LNE_UpdateEventHouseNut,LNE_FinanceSubTabs_CX,LNE_EventStandardController_CX,LNE_ExpenseTab_CX" sidebar="false" showHeader="false" id="LNE_SettlementExpensesTabPage">

    <apex:remoteObjects >
        <apex:remoteObjectModel name="Event__c" jsShorthand="Event" fields="Id,ActualDropCount__c,SettlementPaidTickets__c,SettlementNetGross__c,SettlementGross__c,SettlementAdjustedGross__c">
        </apex:remoteObjectModel>
    </apex:remoteObjects>

    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

        <head>
            <title>Settlement Expenses</title>

            <apex:stylesheet value="{!URLFOR($Resource.LNE_romelds, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />

            <script type="text/javascript" src="{!URLFOR($Resource.GBLite__gb_resources, 'jquery/jquery-min.js')}"></script>
            <apex:includeScript value="{!URLFOR($Resource.LNE_GeneralResources,"js/lib/underscore.js")}" />
            
            <!-- PostMessage communicates between windows -->
            <apex:includeScript value="{!URLFOR($Resource.LNE_GeneralResources,'js/events/LNE_PostMessage2.js')}" />
            <!-- Used to simplify remoting calls -->
            <apex:includeScript value="{!URLFOR($Resource.LNE_GeneralResources,'js/remoting/RemotingHelper.js')}" />
            <!-- handles routing of PostMessages -->
            <apex:includeScript value="{!URLFOR($Resource.LNE_GeneralResources,'js/events/LNE_MessagePostOffice.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.LNE_GeneralResources,'js/events/LNE_ResizeEvent.js')}" loadOnReady="true" />

            <script type="text/javascript" src="{!URLFOR($Resource.LNE_vf_shared_js, 'gridUnsavedChangePrompt.js')}"></script>
            <apex:form >
              <apex:actionFunction action="{!getRelatedExpenses}" name="GetRelatedExpenses_JS" oncomplete="refreshGrid('{!relatedExpensesCount}');">
              </apex:actionFunction>
            </apex:form>

             <style>
                .top-master-container,
                .top-row-2-container {
                    width: 100%;
                }
                
                .select-expenses-container {
                    float: left;
                    margin: 0 0 15px 3px;
                    width: 48%;
                }
                .house-nut-top-container,
                .top-row-2-container { 
                    float: right; 
                    margin: 0 0 0 3px; 
                    text-align: right;
                    width: 48%;
                }
                .top-row-2-container {
                    margin-bottom: 0;   
                }
                .top-container .cell {
                    display: inline-block;
                    padding: 4px 8px; 
                    text-align: right;
                    vertical-align: top;
                }
                .house-nut-top-container label {
                    display: block;
                    margin-bottom: 8px;
                }
                .house-nut-top-container input {
                    text-align: right;
                }
                .house-nut-top-container td.shortPad {
                    padding: 4px 4px;
                }
                .bold { 
                    font-weight:bold; 
                }
                .hide {
                    display: none;
                }
                .show {
                    display: block;
                }
            </style>

        </head>
        
        <body class="rome-lds" id="LNE_ExpenseTab--body" data-event-id="{!Event__c.Id}" data-has-related-expenses="{!hasRelatedExpenses}">
            <div>
                <apex:outputPanel rendered="{!eventRecord.SettlementStarted__c = false}">
                    <apex:form >
                            <apex:actionFunction name="startSettlementJS" action="{!startSettlement}" oncomplete="postRefreshMessage();" rerender="LNE_SettlementExpensesTabPage" status="progressSpinner"/>
                            <div style="margin:20px;">
                                <span class="slds-icon_container">
                                    <svg class="slds-icon slds-icon-text-default slds-icon--x-small" aria-hidden="true">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LNE_romelds, '/assets/icons/utility-sprite/svg/symbols.svg#chevronright')}"></use>
                                    </svg>
                                </span>
                                <a id="startSettlementLink" onclick="startSettlement();return false;" style="vertical-align: middle;">Start Settlement Process</a>
                                <apex:actionStatus id="progressSpinner">
                                    <apex:facet name="start">
                                        <div class="slds-spinner--brand slds-spinner slds-spinner--large" role="alert">
                                            <span class="slds-assistive-text">Loading...</span>
                                            <div class="slds-spinner__dot-a"></div>
                                            <div class="slds-spinner__dot-b"></div>
                                        </div>
                                    </apex:facet>
                                </apex:actionStatus>
                            </div>
                        </apex:form>
                </apex:outputPanel>

                <apex:outputPanel rendered="{!eventRecord.SettlementStarted__c = true}">
                    <apex:form >
                        <apex:actionFunction action="{!showHideCalculations}" name="showHideCalculations_JS"></apex:actionFunction>

                        <div class="slds-clearfix top-master-container">
                          <div class="top-container select-expenses-container">
                            <div class="cell">
                                <a href="#" id="select-expenses-button">Select Expenses</a>
                            </div>
                          </div>
                          <div class="top-container house-nut-top-container">
                            <!-- <apex:form id="houseNutTopForm"> -->
                                <div class="cell">
                                  <label for="using-house-nut-check" class="slds-text-heading--label-normal">{!$ObjectType['Event__c'].fields['UsingHouseNut__c'].Label}</label>
                                  <apex:inputField html-data-control="nut-amount-chk" id="using-house-nut-check" value="{!Event__c.UsingHouseNut__c}" styleClass="shortPad" onBlur=""/>
                                </div>
                                <div class="cell">
                                  <label for="house-nut-amount" class="slds-text-heading--label-normal">{!$ObjectType['Event__c'].fields['SettlementHouseNut__c'].Label}</label>
                                  <apex:inputField html-data-control="nut-amount-input" id="house-nut-amount" value="{!Event__c.SettlementHouseNut__c}" onBlur=""/>
                                </div>
                                <!-- US116 Start-->
                                <div class="cell">
                                  <label for="advertisingsettlementplan" class="slds-text-heading--label-normal">{!$ObjectType['Event__c'].fields['AdvertisingSettlementPlan__c'].Label}</label>
                                  <apex:inputField html-data-control="advertisingsettlementplan-input" id="advertisingsettlementplan" value="{!eventRecord.AdvertisingSettlementPlan__c}" onBlur=""/>
                                </div>
                                <!-- US116 End-->
                            <!-- </apex:form> -->
                          </div>
                        </div>

                        <div class="slds-clearfix top-container top-row-2-container">
                            <div class="cell">
                                <button data-control="apply-house-nut-top" class="slds-button slds-button--brand">Apply</button>
                            </div>
                        </div>
                        
                        <div class="slds-spinner_container hide" id="grid-spin">
                          <div role="status" class="slds-spinner slds-spinner--large">
                            <span class="slds-assistive-text">Loading</span>
                            <div class="slds-spinner__dot-a"></div>
                            <div class="slds-spinner__dot-b"></div>
                          </div>
                        </div>
                   
                        <apex:outputPanel style="margin-left: 8px;">
                            <button data-control="switch-calculations" class="slds-button slds-button--neutral slds-button--brand">{!calculationsButtonValue}</button>
                        </apex:outputPanel>
                    </apex:form>

                    <apex:outputPanel id="grids" layout="none">
                        <div id="all-grids-container">
                            <GBLite:EmbedComponent baseGridUrl="{!$Page.GBLite__Grid}" />
                            <iframe class="hide" id="grid-frame-expenses" data-grid-name="expenses" scrolling="auto" height="780" width="100%" frameborder="0" src=""></iframe>

                            <iframe id="grid-frame-additions" data-grid-name="additions" scrolling="auto" height="300" width="100%" frameborder="0" src="{!gridPage}gname=Additions&fpf=Event__c&fpv={!Id}&sbb=0&sh=0&ssb=0"></iframe>
                            <iframe id="grid-frame-deductions" data-grid-name="deductions" scrolling="auto" height="300" width="100%" frameborder="0" src="{!gridPage}gname=Deductions&fpf=Event__c&fpv={!Id}&sbb=0&sh=0&ssb=0"></iframe>
                        </div>
                    </apex:outputPanel>

                </apex:outputPanel>

           </div>

           <script>
                var GRID_NAME_EXPENSES = 'Settlement Expenses';
                var GRID_NAME_HOUSE_NUT = 'Settlement Expense - House Nut';
                var showHideCalculations = '{!calculationsButtonValue}';
                var parentEvent;
                var showHideCalculationsButtonClicked = false;

                function viewCalculations() {
                    return showHideCalculations != 'View Calculations';
                }

                function postRefreshMessage() {
                    var WINDOW_PAGE_NAME = 'LNE_SettlementExpensesOfficeTab';
                    var auraId = '{!$CurrentPage.parameters.auraId}';
                    var messageType = 'saveComplete';
                    var isSuccessful = true;

                    var data = {
                        auraId: auraId,
                        src: window.location.href
                    };

                    var postMessage = new LNE_PostMessage( WINDOW_PAGE_NAME, messageType, isSuccessful, data );
                    postMessage.dispatch( parent );

                    location.reload(true);
                }

                //-- handle inbound PostMessages
                this.postOffice = new LNE_MessagePostOffice(this);
                
                //-- handle any inbound events
                this.postOffice.addTypeHandler( 'saveComplete', function( myPostMessage ){
                    if( myPostMessage.data.src != window.location.href ){
                        window.location.href=window.location.href;
                    }
                });
                
                this.postOffice.addTypeHandler( 'defaultFees', function( myPostMessage ){
                    var targetFrame = jQuery( "iframe#grid-frame-expenses" )[0];
        
                    //-- get the value from remoting and pass the results to the child iframe on success
                    var eventId = '{!event}';
                    console.log(eventId);
                    console.log('Calling it!');
                    remotingHelper( 'LNE_SettlementExpensesTab_CX.defaultFees', eventId,
                            function( messageResult ){
                                console.log('remoting callback', messageResult);
                                var pageName = 'LNE_FinanceEventMetrics';
                                var isSuccessful = true;
        
                                //-- some custom message type. Again, only saveComplete is special/recognized for now.
                                var messageType = 'defaultFees_completed'
        
                                //-- send the data payload as an object with stuff to return.
                                //-- always include src as some unique identifier for the page
                                var data = {
                                    message: messageResult,
                                    src: window.location.href
                                };
        
                                 var responseMessage = new LNE_PostMessage( pageName,messageType,isSuccessful,data);
                                 responseMessage.dispatch( targetFrame.contentWindow );
        
                            }, function( errorMessage ){
                                console.log( 'Default Fees :FAILURE:' + errorMessage );
                                
                            }
                    );
                });                
                
                postOffice.listenForPostEvents(window);

                var startSettlementClicked = false;

                function startSettlement() {
                    if (startSettlementClicked == false) {
                        disableStartSettlementLink();
                        startSettlementClicked = true;
                        startSettlementJS();
                    }
                }

                function disableStartSettlementLink() {
                    var link = document.getElementById('startSettlementLink');
                    link.onclick = null;
                    link.style.color = 'grey';
                    link.style.cursor = 'default';
                    var css = '#startSettlementLink:hover{ text-decoration: none; }';
                    var style = document.createElement('style');
                    style.appendChild(document.createTextNode(css));
                    document.getElementsByTagName('head')[0].appendChild(style);
                }

                var lneExpenseTab = {
                  bodyId: 'LNE_ExpenseTab--body',
                  gridId: 'all-grids-container',
                  useNutGrid: false
                };
                var overlayWindow;
                var selectExpensesUrl = createApexURL('LNE_SelectExpenseEntries');
                
                window.postOffice = new LNE_MessagePostOffice(this);
                this.postOffice.addTypeHandler( 'iframeResizeRequest', function( myPostMessage ){
                    console.log( 'iframeResizeRequest received' );
                    var selector = 'iframe';
                    if( myPostMessage.data && myPostMessage.data.frameTarget ){
                        selector = "iframe#" + myPostMessage.data.frameTarget;
                    }
                    jQuery( selector ).css( "height", myPostMessage.data.newHeight ).attr( "height",myPostMessage.data.newHeight )

                });
                postOffice.listenForPostEvents(window);

                function applySelectedExpenseEntries(evt) {
                  var initialFocus = true;

                  overlayWindow = window.open(selectExpensesUrl + '?event_id={!Event__c.Id}&type=Settlement', '_blank', 'location=no,width=900,height=600,menubar=yes');

                  $(overlayWindow).on('unload', function() {
                    closeOverlayWindow();
                    GetRelatedExpenses_JS();
                  });

                  $(overlayWindow).on('blur', function() {
                    closeOverlayWindow();
                    GetRelatedExpenses_JS();
                  });
                }

                function closeOverlayWindow() {
                  if (overlayWindow && !overlayWindow.closed) {
                    overlayWindow.close();
                  }

                  overlayWindow = null;
                }

                function createApexURL(pageName) {
                  var currentLocation = window.location.href;
                  var ajaxURL = currentLocation.replace( 'gblite.', 'c.' );

                  ajaxURL = ajaxURL.substring(0, ajaxURL.toLowerCase().indexOf('/apex/' )) + '/apex/' + pageName;

                  return( ajaxURL );
                }

                function refreshGrid(expenseCount) {
                  var gridContainer = $('#' + lneExpenseTab.gridId);

                  if (expenseCount > 0) {
                    var iframeLoc = $('#grid-frame-expenses').attr('src');

                    $('#grid-frame-expenses').attr('src', iframeLoc);

                    gridContainer.show();
                  } else {
                    gridContainer.hide();
                  }
                }

                function updateEventNut(chk, amt) {
                    console.log('updateEventNut VF called');
                    var win;
                    var useNut = false;
                    if ($('[data-control="nut-amount-chk" ]').prop('checked')) {
                        useNut = true;
                    }
                    
                    win = $('#grid-frame-expenses').get(0).contentWindow;  

                    console.log('chk is ' + chk + ' amt is ' + amt);
                    // Have to check for any grid changes if there are any do NOT save!
                    remotingHelper( 'LNE_UpdateEventHouseNut.updateEventSettlement', 
                        '{!Event__c.Id}',
                        chk,
                        amt,
                        function( event ){
                                console.log('saved EventHouseNut event');
                                console.log(event);
                                toggleGrids();
                                lneSharedJs.handleSuccessfulSave();
                            },
                            function( errorMessage ){
                                console.log('failed to save EventHouseNut: ' + errorMessage);
                            }
                    );
                };

                function receiveNutMessage(event) {
                    console.log('receiveNutMessage VF event.data.requestedAction ' + event.data.requestedAction);
                    console.log(event);

                    if (event && event.data && event.data.changes) {
                        if (showHideCalculationsButtonClicked == true && event.data.changes) {
                            showHideCalculationsButtonClicked = false;

                            if (event.data.requestedAction === 'reportForNutSave' && event.data.changes === 'true') {
                                window.alert('You must save your current entries before changing the view or discard by clicking Refresh in the grid.');
                                $('#grid-spin').hide();
                            } else if (event.data.requestedAction === 'reportForNutSave' && event.data.changes !== 'true') {
                                showHideCalculations_JS();
                            }

                        } else {
                            var useNut = false;
                            if (event.data.requestedAction === 'reportForNutSave' && event.data.changes === 'true') {
                                window.alert('Please save any grid changes before applying house nut. Save your changes, then click Apply again when ready.');
                                $('#grid-spin').hide();
                            } else if (event.data.requestedAction === 'reportForNutSave' && event.data.changes !== 'true') {
                                if ($('[data-control="nut-amount-chk" ]').prop('checked')) {
                                    useNut = true;
                                }
                                var amt = $('[data-control="nut-amount-input"]').val();
                                amt = amt.replace(',','');
                                if (amt == undefined || amt == null || amt == "") {
                                    amt = 0;
                                }
                                updateEventNut(useNut, amt);
                            }
                        }
                    }
                }

                function listenForEventRequests(event) {
                    if (event.data.requestedAction === 'getEventObject') {
                        document.getElementById("grid-frame-expenses").contentWindow.postMessage({'requestedAction': 'parentEventData', data: JSON.stringify(parentEvent)}, '*');
                    }
                }

                function toggleGrids() {
                    var curr = $('#grid-frame-expenses').attr('src');
                    var useNut = false;
                    var src;
                    var fpf = 'Event__c';
                    var fpv = '{!Id}';

                    if (viewCalculations() == true) {
                        fpf = 'SettlementCalculationFilter__c';
                        fpv = '{!Id}' + '|' + 'true';
                    }
                    
                    if ($('[data-control="nut-amount-chk" ]').prop('checked')) {
                        useNut = true;
                        if (!curr) {
                            curr = '{!gridPage}gname=' + GRID_NAME_HOUSE_NUT + '&fpf=' + fpf + '&fpv=' + fpv + '&sbb=0&sh=0&ssb=0';    
                        }
                    } else {
                         if (!curr) {
                            curr = '{!gridPage}gname=' + GRID_NAME_EXPENSES + '&fpf=' + fpf + '&fpv=' + fpv + '&sbb=0&sh=0&ssb=0';    
                        }                       
                    }
                    
                    if (useNut) {
                        console.log('############################################################## use nut');
                        r = 'gname=' + GRID_NAME_HOUSE_NUT;
                        if (curr.indexOf('gname=' + GRID_NAME_HOUSE_NUT) == -1) {
                            src = curr.replace('gname='+GRID_NAME_EXPENSES,r);
                        } else {
                            src = curr;
                        }
                    } else {
                        console.log('############################################################## no nut');
                        r = 'gname=' + GRID_NAME_EXPENSES;
                        if (curr.indexOf('gname=' + GRID_NAME_EXPENSES) == -1) {
                            src = curr.replace('gname=' + GRID_NAME_HOUSE_NUT,r);
                        } else {
                            src = curr;
                        }
                    }
                    
                    src += '&frameTarget=grid-frame-expenses&showHideCalculations={!calculationsButtonValue}';
                
                    console.log('curre - ' + curr);
                    console.log('src - ' + src);
                    console.log('change url!');
                    document.getElementById('grid-frame-expenses').src = src;
                    
                    console.log('iframe src now ' + $('#grid-frame-expenses').attr('src'));
                    $('#grid-frame-expenses').removeClass('hide');
                    function removeSpin() {
                      $('#grid-spin').hide();
                    }
                    window.setTimeout(removeSpin, 2000);
                }

                lneExpenseTab.init = function() {
                  var changedDom = false;
                  var hasRelatedExpenses = $('#' + lneExpenseTab.bodyId).attr('data-has-related-expenses');
                  var gridContainer = $('#' + lneExpenseTab.gridId);
                  var chk = $('[data-control="nut-amount-chk" ]').val();
                  var useNut = chk == 1 ? true : false;
                  console.log(' lneExpenseTab.init ');
                  window.addEventListener("message", receiveNutMessage, false);
                  window.addEventListener("message", listenForEventRequests, false);

                  if (hasRelatedExpenses === 'true') {
                    gridContainer.show();
                  } else {
                    gridContainer.hide();
                  }

                  toggleGrids();
                  
                  //-- reintroduce the select expense button
                  $('#select-expenses-button').on('click', function() {
                    if (!overlayWindow && document.hasFocus()) {
                        applySelectedExpenseEntries.apply(this, arguments);
                    }
                  });
    
                   $('[data-control="nut-amount-chk" ]').on('click', function() {
                       if ($(this).prop('checked')) {
                           console.log('nut on');
                            $('[data-control="nut-amount-input" ]').val('');
                            $('[data-control="nut-amount-input" ]').prop('disabled',''); 
                       } else {
                           console.log('nut off');

                            $('[data-control="nut-amount-input" ]').val(0);
                            $('[data-control="nut-amount-input" ]').prop('disabled','disabled');
                       }
                  }); 

                  $('[data-control="apply-house-nut-top"]').on('click', function(e) {
                    e.preventDefault();
                    console.log('apply clicked');
                    var win;
                    var useNut = false;
                    if ($('[data-control="nut-amount-chk" ]').prop('checked')) {
                        useNut = true;
                        if ($('[data-control="nut-amount-input" ]').val() === '') {
                            $('[data-control="nut-amount-input" ]').attr('style','border: solid red 2px;');
                            return false;
                        } else {
                            $('[data-control="nut-amount-input" ]').attr('style','none;');
                        }
                    }
                    
                    //save event details - US116
                    var eventId = '{!event}';
                    
                    var advertisingsettlementplan = $('[data-control="advertisingsettlementplan-input"]').val();
                    remotingHelper( 'LNE_SettlementExpensesTab_CX.saveEvent', eventId, advertisingsettlementplan,
                        function( eventSaveSuccess ){
                            console.log('@@@ event save SUCCESS: '+ eventSaveSuccess);   
                        }, function( errorMessage ){
                            console.log( '@@@ event save FAILURE: ' + errorMessage );
                        }
                    );

                    $('#grid-spin').show();
                    win = $('#grid-frame-expenses').get(0).contentWindow;
                    win.postMessage({'action': 'reportForNutSave'}, '*');
                    window.postMessage({'requestedAction': 'reportForNutSave'}, '*');
                  });

                  $('[data-control="switch-calculations"]').on('click', function(e) {
                    showHideCalculationsButtonClicked = true;
                    e.preventDefault();
                    
                    $('#grid-spin').show();
                    win = $('#grid-frame-expenses').get(0).contentWindow;
                    win.postMessage({'action': 'reportForNutSave'}, '*');
                    //window.postMessage({'requestedAction': 'reportForNutSave'}, '*');
                  });

                  lneSharedJs.sharedInit();
                };

                var ct = new SObjectModel.Event();

                ct.retrieve({where: {Id: {eq: '{!Id}' }}}, function(err, records, event) {
                    if(err) {
                        console.log(err.message);
                    } else {
                        if (records.length > 0) {
                            parentEvent = records[0];
                        }
                    }

                    lneExpenseTab.init();
                });
                
            </script>
        
            <c:LNE_Copyright />
        </body>

    </html>
</apex:page>